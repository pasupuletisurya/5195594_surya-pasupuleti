 question 1;

 def plusMinus(arr):
     positiveCounter = 0
     negetiveCounter = 0
     zeroCounter = 0
     for i in range (len(arr)):
         if arr[i] > 0:
              positiveCounter += 1
         elif arr[i] < 0 :
              negetiveCounter +=1
         else:
              zeroCounter += 1
      print("%f"%(positiveCounter / len(arr)))
      print("%f"%(negetiveCounter / len(arr)))
      print("%f"%(zeroCounter / len(arr)))
question 2;
   def miniMaxSum(arr):
       arr = sorted(arr)
       print(sum(arr[:-1]),sum(arr[1:]))

question 3;
 import math
import os
import random
import re
import sys


def timeConversion(s):
    date=datetime.datetime.strptime(s,"%I:%M:%S%p")
    
    date_converted=date.strftime("%H:%M:%S")
    
    return(date_converted)
  


question 4;
def matchingStrings(strings, queries):
     results = []
 
     for query in queries:
        results.append(strings.count(query))
 
     return results
question 5;
  def lonelyinteger(a):
      for i in a:
          if a.count(i)==1:
            return i
question 6;
 def diagonalDifference(arr):
     x = 0
     y = 0
 
     for i in range(len(arr)):
        x += arr[i][i]
        y += arr[i][len(arr)-1-i]
     return(abs(x-y))
question 7;
  def countingSort(arr):
    freq = [0]*100
    for i in range(len(arr)):
        freq[arr[i]] += 1
    return freq
question 8;
 def pangrams(s):
    alphabet={}
    for i in s.lower():
        if i.isalpha() and i in alphabet:
            alphabet[i]+=1
        elif i.isalpha() and i not in alphabet:
            alphabet[i]=0
    
    if len(alphabet)==26:
        return  "pangram"
    else:
        return "not pangram"
question 9;
 def twoArrays(k, A, B):
    A.sort()
    B.sort(reverse=True)    
    for a,b in zip(A,B):
        if a+b <k:
            return "NO"
    
     return "YES"
question 10;
import math
import os
import random
import re
import sys

def flippingBits(n):
      l = format(n,'032b')
      m = []
      for i in range(len(l)):
          m.append(1-int(l[i]))

      sum = 0
      for i in range(len(m)):
          sum += int(m[i])*(2**(31-i))
      return sum
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        n = int(input().strip())

        result = flippingBits(n)

        fptr.write(str(result) + '\n')

    fptr.close()
question 11;
import math
import os
import random
import re
import sys

def birthday(s, d, m):
    count = 0
    for i in range(len(s) - m + 1):
        segment = s[i:i + m]
        if sum(segment) == d:
            count += 1
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    s = list(map(int, input().rstrip().split()))

    first_multiple_input = input().rstrip().split()

    d = int(first_multiple_input[0])

    m = int(first_multiple_input[1])

    result = birthday(s, d, m)

    fptr.write(str(result) + '\n')

    fptr.close()
 
question 12;
def strings_xor(s, t):
    res = ""
    for i in range(len(s)):
        if s[i] = t[i]:
            res = '0';
        else:
            res = '1';

    return res

s = input()
t = input()
print(strings_xor(s, t))

